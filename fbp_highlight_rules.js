/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from FBP.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var FBPHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: "string.quoted.fbp",
            regex: /'.+'/,
            comment: "IIP string"
        }, {
            token: "keyword.operator.connection.fbp",
            regex: /->/,
            comment: "Operator"
        }, {
            token: [
                "entity.name.function.port.fbp",
                "variable.expression.fbp",
                "entity.name.tag.component.fbp",
                "storage.type.fbp",
                "variable.expression.fbp",
                "entity.name.function.port.fbp"
            ],
            regex: /([A-Z0-9]+)( )(\w+)((?:\([\w\/\.\-]+\))?)(?:( )([A-Z0-9]+))?/,
            comment: "Component with port on the left (optionally on the right too)"
        }, {
            token: [
                "entity.name.function.port.fbp",
                "variable.expression.fbp",
                "entity.name.tag.component.fbp",
                "storage.type.fbp",
                "variable.expression.fbp",
                "entity.name.function.port.fbp"
            ],
            regex: /(?:([A-Z0-9]+)( ))?(\w+)((?:\([\w\/\.\-]+\))?)( )([A-Z0-9]+)/,
            comment: "Component with port on the right (optionally on the left too)"
        }, {
            token: "comment.source.fbp",
            regex: /#.*/,
            comment: "Comment"
        }, {
            token: [
                "constant.language.fbp",
                "keyword.operator.declaration.fbp",
                "variable.component.fbp",
                "keyword.operator.access.fbp",
                "entity.name.function.port.fbp",
                "keyword.operator.naming.fbp",
                "entity.name.fbp"
            ],
            regex: /((?:IN|OUT|EX)PORT)(=)(\w+)(\.)([A-Z0-9]+)(:)([A-Z0-9]+)/,
            comment: "External port declaration"
        }]
    }

    this.normalizeRules();
};

FBPHighlightRules.metaData = {
    fileTypes: ["fbp"],
    name: "FBP",
    scopeName: "source.fbp"
}


oop.inherits(FBPHighlightRules, TextHighlightRules);

exports.FBPHighlightRules = FBPHighlightRules;
});